//
//  ParentViewController.swift
//  DataPassing
//
//  Created by Raymond Law on 3/22/18.
//  Copyright (c) 2018 Clean Swift LLC. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ParentDisplayLogic: class
{
  func displayGreeting(viewModel: Parent.ShowGreeting.ViewModel)
  func displayTellChild(viewModel: Parent.TellChild.ViewModel)
}

class ParentViewController: UIViewController, ParentDisplayLogic
{
  var interactor: ParentBusinessLogic?
  var router: (NSObjectProtocol & ParentRoutingLogic & ParentDataPassing)?

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = ParentInteractor()
    let presenter = ParentPresenter()
    let router = ParentRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
  }
  
  override func viewWillAppear(_ animated: Bool)
  {
    super.viewWillAppear(animated)
    showGreeting()
  }
  
  // MARK: Show greeting
  
  @IBOutlet weak var label: UILabel!
  @IBOutlet weak var textField: UITextField!
  
  func showGreeting()
  {
    let request = Parent.ShowGreeting.Request()
    interactor?.showGreeting(request: request)
  }
  
  func displayGreeting(viewModel: Parent.ShowGreeting.ViewModel)
  {
    label.text = viewModel.greeting
  }
  
  // MARK: Tell child
  
  @IBAction func buttonTapped(_ sender: Any)
  {
    tellChild()
  }
  
  func tellChild()
  {
    let name = textField.text!
    let request = Parent.TellChild.Request(name: name)
    interactor?.tellChild(request: request)
  }
  
  func displayTellChild(viewModel: Parent.TellChild.ViewModel)
  {
    router?.routeToChild(segue: nil)
  }
}
